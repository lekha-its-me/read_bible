// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.
const push = null;

var CACHE_NAME = 'textToCache',
// ссылки на кэшируемые файлы
  cacheUrls = [
    '/',
    '/index.html',
    '/scripts/main.js',
    '/scripts/material.js',
    '/scripts/material-modal.min.js',
    '/styles/main.css',
    '/styles/material.css',
    '/styles/material-modal.min.css',
    '/styles/fonts/MaterialIcons-Regular.eot',
    '/styles/fonts/MaterialIcons-Regular.ttf',
    '/styles/fonts/MaterialIcons-Regular.woff',
    '/styles/fonts/MaterialIcons-Regular.woff2'
  ];

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE_NAME).then(function(cache) {
      return cache.addAll(cacheUrls);
    })
  );
});

self.addEventListener('activate', function(event) {
  // активация
  console.log('activate', event);
});

var MAX_AGE = 86400000;

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Cache hit - return response
        if (response) {
          return response;
        }

        // IMPORTANT: Clone the request. A request is a stream and
        // can only be consumed once. Since we are consuming this
        // once by cache and once by the browser for fetch, we need
        // to clone the response.
        var fetchRequest = event.request.clone();

        return fetch(fetchRequest).then(
          function(response) {
            // Check if we received a valid response
            if(!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have two streams.
            var responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(function(cache) {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
  );
});

self.addEventListener('push', function(event) {
  console.log('[Service Worker] Push Received.');
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`);

  const title = 'Push Codelab';
  const options = {
    body: `${event.data.text()}`,
    icon: 'images/icon.png',
    badge: 'images/badge.png'
  };

event.waitUntil(self.registration.showNotification(title, options));
});